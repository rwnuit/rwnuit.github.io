[{"categories":["documentation"],"content":"一种传染病动力学建模方法.","date":"2023-06-20","objectID":"/test_essay/","tags":["essay","测试"],"title":"测试用论文","uri":"/test_essay/"},{"categories":["documentation"],"content":"一种传染病动力学建模方法。 Covid-19仓室建模方法概述及应用举例 摘要 本文对以SIR为基础的传染病仓室数学建模方法进行了简要概述，随后以Fernández、Charles(2022)提出的SIRD模型为基础，对2020年湖北省疫情数据做了综合分析，对该模型做出基础评估。 关键词 Compartmental Modeling; SIR; SEIR; ","date":"2023-06-20","objectID":"/test_essay/:0:0","tags":["essay","测试"],"title":"测试用论文","uri":"/test_essay/"},{"categories":["documentation"],"content":"Introduction ​ 在流行病学研究中，建立传染病传播模型是必要的一环。传染病建模方式多样，在数学建模这一类别中，SIR仓室模型，SEIR模型及其它变种应用较多。SIR将人群分为\"Susceptible-Infected-Recovered\"三个仓室，总人口随时间在仓室间分配。SEIR模型则对仓室进行了调整——“Susceptible-Exposed-Infected-Recovered”。根据具体的模型设定，仓室人群变动受到一系列参数限制。 ​ SIR等仓室模型能够基于有限样本数据，对各期感染、恢复、死亡人数进行预测。模型中的接触率、死亡率能够在一定程度上反映传染病特征，简单的建模手段与及时的预测结果能够评估传染病防控措施的效果与合理性。传染病建模的另一个研究目的在于评估基本再生数的变化。基本再生数为一个具有传染性的个体理论上能够二次传染的人数，其能够反映出社交隔离等疫情防控措施的效果。 ​ 2019年12月新冠肺炎疫情发生以来，有众多文献对Covid-19传播过程进行了建模分析，其中SIR等仓室模型占比较多。Youssoufa, Aminou(2020)对在Covid-19研究中使用的不同模型进行了总结1， 其中已有的仓室建模方法涵盖了SIR，SEIR，SIQR——“Susceptible-Infectious-Quarantined-Recovered”，SEIQR——“Susceptible-Exposed-Infectious-Quarantined-Recovered\"等多类仓室划分。 ​ 各类仓室模型主要的研究问题包括对各仓室人数，接触率、恢复率等参数的动态估计，以及防疫措施对疾病传播的影响。部分模型进一步考虑了年龄等因素对于疾病传播的影响。 ","date":"2023-06-20","objectID":"/test_essay/:1:0","tags":["essay","测试"],"title":"测试用论文","uri":"/test_essay/"},{"categories":["documentation"],"content":"Compartmental modeling ​ 本文使用湖北省在疫情发展初期的数据对仓室模型做一基本应用举例，概述基本再生数$R_0(t)$以及总死亡人数等疫情发展特征。 ","date":"2023-06-20","objectID":"/test_essay/:2:0","tags":["essay","测试"],"title":"测试用论文","uri":"/test_essay/"},{"categories":["documentation"],"content":"Modeling ​ Fernández、Charles提供了一种简易的SIRD建模方式2，以在疫情发展初期对传染病特征、发展趋势进行快速估计和预测。该模型的仓室划分为Susceptible-Infectious-Resolving-Cured-Death。各仓室人数满足： $$ N=S_t+I_t+R_t+D_t+C_t $$ 状态变量 定义 $S_t$ Susceptible $I_t$ Infectious $R_t$ Resolving $D_t$ Death $C_t$ Cured ​ 该模型基本设定如下，处于易感染状态的人在接触率$\\beta_t$下与已感染群体接触后将被感染，模型设定传染性以速率$\\gamma$衰减，经过$\\frac{1}{\\gamma}$时间后患者失去传染性，并被归纳到Resolving仓室中。经过$\\frac{1}{\\theta}$时间后，患者疾病以两种方式解决，分别归纳到Death和Cured两个仓室中。参数定义如下： 参数 定义 初始值 $\\beta_t$ 接触率 $\\beta_0$ $\\frac{1}{\\gamma}$ 具有传染性的天数 5 $\\frac{1}{\\theta}$ 疾病处理天数 10 $\\delta$ 死亡率 0.01 $\\alpha$ $R_0(t)$随每日死亡人数的衰减速率 0.05 ​ 模型时变系统如下： $$ \\begin{align} \u0026\\Delta S_{t+1}=-\\beta_tS_tI_t/N \\ \u0026\\Delta I_{t+1}=\\beta_tS_tI_t/N-\\gamma I_t \\ \u0026\\Delta R_{t+1}=\\gamma I_t - \\theta R_t\\ \\end{align} $$ $$ \\begin{align} \u0026\\Delta D_{t+1}=\\delta\\theta R_t \\ \u0026\\Delta C_{t+1}=(1-\\delta)\\theta R_t \\ \\end{align} $$ ","date":"2023-06-20","objectID":"/test_essay/:2:1","tags":["essay","测试"],"title":"测试用论文","uri":"/test_essay/"},{"categories":["documentation"],"content":"Estimation ​ 该模型的一个特性是将经典SIR仓室模型中的接触率$\\beta$由常量改为时变参数，且可以从单日新增死亡人数d及其差分$\\Delta d$，$\\Delta\\Delta d$中估计。通过简化上述方程，可以求解$\\beta_t$，从而给出对基本再生数$R_0(t)$的估计。 $$ \\begin{align} \u0026\\beta_t=\\frac{N}{S_t}(\\gamma+\\frac{\\frac{1}{\\theta}\\Delta\\Delta d_{t+3}+\\Delta d_{t+2}}{\\frac{1}{\\theta}\\Delta d_{t+2}+d_{t+1}})\\ \u0026S_{t+1}=S_t(1-\\frac{\\beta_t}{\\delta\\gamma N}(\\frac{1}{\\theta}\\Delta d_{t+2}+d_{t+1}))\\ \\end{align} $$ Estimates of $R_0(t)$ ​ 对$R_0(t)$进行估计，可以评价病毒的传播能力和一系列社交限制政策的效果。2020年初新冠疫情发生后，湖北省在1月23日采取了封城措施，最大限度减少了人员流动。本文统计1月23日社交隔离开始到4月16日解封后的单日死亡数据，对$R_0(t)$进行估计。在Fernández, Charles(2022)一文中，常量$\\gamma$, $\\theta$, $\\delta$被认定为生物学特征，不随时间与地域变化，本文将沿用其数值。 ​ 图1为经HP滤波处理前后的单日死亡人数趋势。原始数据因为统计方式差异和报告日期滞后而存在短期波动，例如政府可能在某一天未报告数据，并选择累积至后一天进行报告。为减小短期波动噪声对参数估计的影响，本文对其进行平滑处理(参数$\\lambda$=200)。单日死亡人数在一段时间内持续上升，在2月中旬达到峰值，图2中单日死亡人数差分的变化趋势还表明，在隔离政策施行后，单日死亡人数的增速有所放缓，并在2月中旬开始下降。 图3描述了基本再生数$R_0(t)$的变化，图4为对应时期接触率$\\beta_t=R_0(t)\\gamma$的变化。$R_0$相对于1的大小刻画了传染病的传播能力，假设初始状态易感染群体人数为$S_0=N$，如果$R_0$大于1，疫情会进一步传播；如果小于1，该传染病基本不具备发展能力。如图，以政策施行日为起始，$R_0$大于1，此后$R_0(t)$有明显的下降趋势，在2月上旬，$R_0(t)$下降至临界点。 Estimates of $I_t/N$ ​ 图5描述了当期感染人数占总人口比的变化。基于死亡人数的历史数据，每期具有传染性的患者人数及其占比均可被估计出。估计的感染高峰期出现在2月9日前后，具有传染性的患者占总人口比达到了0.12%。 ","date":"2023-06-20","objectID":"/test_essay/:2:2","tags":["essay","测试"],"title":"测试用论文","uri":"/test_essay/"},{"categories":["documentation"],"content":"Forecasting ​ 该模型使用未来3天的数据来估计当期变量，而样本外的状态变量依赖于以新方式估计的$\\beta_t$和$R_0(t)$。依照与Fernández, Charles(2022)相同的处理方式，本文假定，$R_0(t)$有一随每日死亡人数变化的恒定衰减速率$\\alpha$， 满足： $$ R_0(t)=a_0e^{-\\alpha d(t)} $$ $$ R_0(t+1)=(1-\\alpha\\Delta d(t))R_0(t) $$ 从而： $$ \\beta_{t+1}=(1-\\alpha \\Delta d(t))\\beta_t $$ 由此，$D_{t}$等仓室中的人数变化趋势可以基于已有数据被预测。 ​ 本文样本包含了湖北省2020年1月23日至4月16日的数据，由蓝色柱状图代表。图6显示了8种不同的预测方式及其结果。底部7条线由上至下，分别表示利用样本内最近七天的死亡数据进行预测的结果。例如，红色线条表示，利用样本最后一日，也就是4月16日实际的死亡数据进行估计。黑色线条表示利用4月10日的实际死亡数据进行估计，顶部的线条代表基于1月23日死亡人数实际数据进行预测的结果，与事实的偏差最大。利用最近的实际数据进行预测将趋势变得相对更平缓。根据2022年12月13日湖北省新冠肺炎疫情情况通报数据，总死亡人数停止在4512人，利用最新样本进行预测的结果与实际值非常接近，例如，使用样本最后一日死亡数据估计出的总死亡人数最终稳定至4393人。 ","date":"2023-06-20","objectID":"/test_essay/:2:3","tags":["essay","测试"],"title":"测试用论文","uri":"/test_essay/"},{"categories":["documentation"],"content":"Disscussion ​ 该模型能够以有限的样本数量估计接触率$\\beta_t$和基本再生数$R_0(t)$的变化，以此评估政策作用。在疫情发展初期施行控制人员流动的政策有助于降低接触率，阻止疾病的传播，并延缓感染高峰的到来。图4中$\\beta_t$的迅速下降表明政策的有效进行，湖北省疫情基本再生数在封城后一个月内迅速下降到了1以下，这意味着单个有传染性的病人无法将受感染者群体扩大开来。该模型对于$I_t/N$的估计能够对感染高峰期进行预测，这有助于缓解政策压力，为医疗资源筹措提供信号。对总死亡人数的预测能够评估疫情带来的损失体量，为疫后生产生活恢复提供建议。 ​ 同时该模型存在若干不足。死亡率$\\delta$等参数被设定为外生给定，但在年龄结构、区域等方面，其存在一定的异质性。使用不同的值会对估计造成一定的影响。另外，$\\beta_t$的估计依赖于单日死亡人数及其变化，如果总死亡人数趋平，该模型无法给出合理的估计，例如，接触率$\\beta_t$和$I_t$仓室的人数可能为负。对于这一问题，本文选择在估计$\\beta_t$时，对其取值做一限制，当$\\beta_t\u003e0$时，其允许被前文所述程序估计，当$\\beta_t\u003c0$时，即当死亡人数等观测数据变动非常小时，$\\beta_t=0.001$。通过这一限制，各仓室人数得以为正。 ​ 该模型表现受到疫情发展阶段的影响。如图6所示，如果基于早期数据对总死亡人数进行估计，结果会与实际值有很大差异，Fernández, Charles(2022)认为，在疫情未发展到高峰时，也即单日死亡人数在上升的阶段，预测结果受噪声影响较大。在后期，单日死亡人数下降的阶段，该模型则表现较好。 ","date":"2023-06-20","objectID":"/test_essay/:2:4","tags":["essay","测试"],"title":"测试用论文","uri":"/test_essay/"},{"categories":["documentation"],"content":"Conclusion ​ 根据传染病特性，仓室模型需要以特殊方式划分人群，这意味着其难以构建普适模型，使用范围较局限。另外，多数仓室模型主要关注变量预测，缺乏对模型的验证与评价。仓室模型还受到数据质量影响，统计方式带来的误差会影响预测结果。例如，诊断能力的改进以及病例的延迟报告会使数据出现异常的波动，进而影响参数的估计。在这一方面，本文缺乏对数据处理方式的评价。 参考文献: MOHAMADOU, Youssoufa, HALIDOU, Aminou, et KAPEN, Pascalin Tiam. A review of mathematical modeling, artificial intelligence and datasets used in the study, prediction and management of COVID-19. Applied Intelligence, 2020, vol. 50, no 11, p. 3913-3925. ↩︎ FERNÁNDEZ-VILLAVERDE, Jesús et JONES, Charles I. Estimating and simulating a SIRD model of COVID-19 for many countries, states, and cities. Journal of Economic Dynamics and Control, 2022, vol. 140, p. 104318. ↩︎ ","date":"2023-06-20","objectID":"/test_essay/:3:0","tags":["essay","测试"],"title":"测试用论文","uri":"/test_essay/"},{"categories":["Markdown"],"content":"这篇文章展示了基本的 Markdown 语法和格式.","date":"2019-12-01","objectID":"/basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例。 注意\r这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 Loveit 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧\r 将此页保存为书签，以备将来参考!\r","date":"2019-12-01","objectID":"/basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"1 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样: \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID\r要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样: \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"2 注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"3 水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"4 段落 按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"5 内联 HTML 元素 如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: Markdown 格式的段落. \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"6 强调 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: \u003cstrong\u003e渲染为粗体\u003c/strong\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: \u003cem\u003e渲染为斜体\u003c/em\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"7 引用 用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"8 列表 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧\r如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框，请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"9 代码 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"行内代码 用 ` 包装行内代码段. 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"缩进代码 将几行代码缩进至少四个空格，例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments\rline 1 of code\rline 2 of code\rline 3 of code\r输出的 HTML 看起来像这样: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它，只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意\rHugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode.\r","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"10 表格 通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐\r在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"11 链接 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"基本链接 \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上，没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage 输出的 HTML 看起来像这样: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意\r定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了.\r","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"12 脚注 脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"13 图片 图片的语法与链接相似, 但包含一个在前面的感叹号. ![Minion](https://octodex.github.com/images/minion.png) 或者: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The Stormtroopocat\r像链接一样, 图片也具有脚注样式的语法: ![Alt text][id] The Dojocat\r稍后在文档中提供参考内容, 用来定义 URL 的位置: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" 技巧\rLoveIt 主题提供了一个包含更多功能的 图片的 shortcode.\r这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":null,"content":"关于 RWnuit","date":"2019-08-02","objectID":"/about/","tags":null,"title":"关于 RWnuit","uri":"/about/"},{"categories":null,"content":"  RWnuit 的个人博客。 基于 hugo 和 LoveIt。 ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"关于 RWnuit","uri":"/about/"}]